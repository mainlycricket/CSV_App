{{- define "Tables" -}}

{{ range $tableName, $table := . }}
{{- $n := len $table.Columns -}}
{{- "\n\n" -}}

    CREATE TABLE "{{- $tableName }}" (

    {{- if not $table.PrimaryKey -}}
    "__ID" SERIAL PRIMARY KEY {{- ", " -}}
    {{- end -}}

    {{- range $columnName, $column := $table.Columns -}}

        "{{- $columnName}}" {{ $column.DataType -}}

        {{- if not (HasSuffix $column.DataType "[]") -}}
            {{- templateCheckConstraints $column $columnName -}}
        {{- end -}}

        {{- if $column.Default -}}
            {{- " DEFAULT " -}} {{ templateValue $column.Default $column.DataType }}
        {{- end -}}

        {{- if eq $columnName $table.PrimaryKey -}}
            {{- " PRIMARY KEY" -}}

        {{- else -}}

            {{- if $column.NotNull -}}
            {{- " NOT NULL" -}}
            {{- end -}}

            {{- if $column.Unique -}}
            {{- " UNIQUE" -}}
            {{- end -}}

        {{- end -}}

        {{- $n = decrease $n -}}
        {{- if $n -}} , {{- else -}} ); {{- end -}}

    {{- end -}}

{{- end -}}
{{end}}

{{- define "array_validator_function" }}
CREATE FUNCTION validate_{{.}}_arr(
    arr {{.}}[] DEFAULT NULL,
    not_null boolean DEFAULT FALSE,
    min_arr_len integer DEFAULT NULL,
    max_arr_len integer DEFAULT NULL,
    min_ind {{.}} DEFAULT NULL, 
    max_ind {{.}} DEFAULT NULL,
    enum_arr {{.}}[] DEFAULT NULL)
RETURNS text AS $$
DECLARE
    val {{.}};
BEGIN
    IF arr IS NULL AND not_null THEN
        RETURN 'Empty Array';
    END IF;

    IF arr IS NULL THEN
        RETURN '';
    END IF;

    IF min_arr_len IS NOT NULL AND array_length(arr, 1) < min_arr_len THEN
        RETURN FORMAT('Array length should be at least %s', min_arr_len);
    END IF;

    IF max_arr_len IS NOT NULL AND array_length(arr, 1) > max_arr_len THEN
        RETURN FORMAT('Array length should be at most %s', max_arr_len);
    END IF;

    FOREACH val IN ARRAY arr LOOP
        {{ if eq . "text" -}}
        IF min_ind IS NOT NULL AND LENGTH(val::text) < min_ind THEN
            RETURN FORMAT('Each element length should be at least %s', min_ind);
        END IF;

        IF max_ind IS NOT NULL AND LENGTH(val::text) > max_ind THEN
            RETURN FORMAT('Each element length should be at most %s', max_ind);
        END IF;

        IF enum_arr IS NOT NULL AND val::text NOT IN (SELECT * FROM unnest(enum_arr)) THEN
            RETURN FORMAT('%s element not present in enums', val);
        END IF;

        {{- else -}}
        IF min_ind IS NOT NULL AND val < min_ind THEN
            RETURN FORMAT('Each element value should be at least %s', min_ind);
        END IF;

        IF max_ind IS NOT NULL AND val > max_ind THEN
            RETURN FORMAT('Each element value should be at most %s', max_ind);
        END IF;

        IF enum_arr IS NOT NULL AND val NOT IN (SELECT * FROM unnest(enum_arr)) THEN
            RETURN FORMAT('%s element not present in enums', val);
        END IF;
        {{- end }}
    END LOOP;
    RETURN '';
END;
$$ LANGUAGE plpgsql;
{{ end }}

{{- define "TableValidatorTrigger" -}}

{{- range $tableName, $table := . -}}

{{- $args := "" -}}

{{- range $columnName, $column := $table.Columns -}}
    {{- $args = getArrayValidatorArgs $column -}}
    {{- if $args -}}
        {{- break -}}
    {{- end -}}
{{- end -}}

{{- if $args }}
CREATE OR REPLACE FUNCTION validate_{{- $tableName -}}_trigger()
RETURNS TRIGGER AS $$
DECLARE
res TEXT;

BEGIN
    
{{- range $columnName, $column := $table.Columns -}}
{{- $args = getArrayValidatorArgs $column -}}
{{- if $args }}

res := validate_{{- TrimSuffix $column.DataType "[]" -}}_arr(NEW."{{- $columnName -}}", {{ $args -}});
IF res != '' THEN
RAISE EXCEPTION 'Error in "{{- $columnName -}}" column in "{{ $tableName }}" table: %', res;
END IF;

{{- end -}}
{{- end }}

RETURN NEW;

END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER validate_table_{{- $tableName -}}_trigger
BEFORE INSERT OR UPDATE ON "{{ $tableName }}"
FOR EACH ROW
EXECUTE FUNCTION validate_{{- $tableName -}}_trigger();

{{- end -}}
{{- end -}}
{{- end -}}

{{- define "ForeignKeys" -}}
{{- range $tableName, $table := . -}}

{{- $count := len $table.Columns -}}

{{- range $columnName, $column := $table.Columns -}}
    {{- if not $column.ForeignField -}}
    {{- $count = decrease $count -}}
    {{- end -}}
{{- end -}}

{{- if $count }}

ALTER TABLE "{{$tableName}}"

{{- range $columnName, $column := $table.Columns -}}
{{- if $column.ForeignField }}
ADD CONSTRAINT "{{ $tableName }}_{{ $columnName }}_fkey" FOREIGN KEY ("{{ $columnName }}")
REFERENCES "{{$column.ForeignTable}}" ("{{$column.ForeignField}}")

{{- $count = decrease $count -}}
{{- if $count -}} , {{- else -}} ; {{- end -}}

{{- end -}}
{{- end -}}
{{- end -}}

{{end}}
{{end}}