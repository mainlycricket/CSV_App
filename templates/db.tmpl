package main

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/lib/pq"
)

func readEnvFile() error {
	basePath, err := os.Getwd()
	if err != nil {
		return err
	}

	data, err := os.ReadFile(filepath.Join(basePath, ".env"))
	if err != nil {
		return err
	}

	lines := strings.Split(string(data), "\n")

	for _, line := range lines {
		line = strings.TrimSpace(line)
		if len(line) == 0 {
			continue
		}

		arr := strings.SplitN(line, "=", 2)
		if len(arr) != 2 {
			continue
		}

		key := strings.TrimSpace(arr[0])
		value := strings.TrimSpace(arr[1])
		if err := os.Setenv(key, value); err != nil {
			return err
		}
	}

	return nil
}

func connectDB() (*sql.DB, error) {
	if err := readEnvFile(); err != nil {
		errorMessage := fmt.Sprintf("error while reading .env file: %v", err)
		return nil, errors.New(errorMessage)
	}

	host := os.Getenv("host")
	port := os.Getenv("port")
	user := os.Getenv("user")
	password := os.Getenv("password")
	dbname := os.Getenv("dbname")

	connStr := fmt.Sprintf("host=%s port=%s user=%s password=%s dbname=%s", host, port, user, password, dbname)

	db, err := sql.Open("postgres", connStr)

	if err != nil {
		return nil, err
	}

	if err := db.Ping(); err != nil {
		return nil, err
	}

	return db, nil
}

{{ range $table := . }}

{{- if $table.IsAuthTable -}}
// AUTH
{{ template "insert" $table }}
{{ template "login" $table }}
{{- else -}}
// {{ $table.TableName }} CRUD
{{ template "insert" $table }}
{{ template "readAll" $table }}
{{ template "readByPK" $table }}
{{ template "update" $table }}
{{ template "delete" $table }}
{{- end -}}

{{- end -}}

{{- define "insert" -}}

func db_insert_ {{- .TableName -}} (ctx context.Context, item *Table_ {{- .TableName -}}) error {
	stmt, err := db.PrepareContext(ctx, `INSERT INTO "{{- .TableName -}}" (

	{{- $n := len .Columns -}}

	{{- range $column := .Columns -}}
		"{{- $column.ColumnName -}}"
		{{- $n = decrease $n -}}
		{{- if gt $n 0 -}}
			{{- ", " -}}
		{{- end -}}
	{{- end -}}

	) VALUES ( 

	{{- $idx := 1 -}}
	{{- $n = len .Columns -}}

	{{- range $column := .Columns -}}
		${{- $idx -}}
		{{- if lt $idx $n -}}
			{{- ", " -}}
		{{- end -}}
		{{- $idx = increase $idx -}}
	{{- end -}}

	)`)

	if err != nil {
		return err
	}

	defer stmt.Close()

	_, err = stmt.ExecContext(ctx,

	{{- $n = len $.Columns -}}

	{{- range $column := .Columns -}}
		{{- if HasSuffix $column.DataType "[]" -}}
			pq.Array(item.Column_  {{- $column.ColumnName -}} )
		{{- else -}}
			item.Column_ {{- $column.ColumnName -}}
		{{- end -}}

		{{- $n = decrease $n -}}
		{{- if gt $n 0 -}}
			{{- ", " -}}
		{{- end -}}

	{{- end -}}

	)

	if err != nil {
		return err
	}

	return nil
}

{{ end }}


{{- define "readAll" -}}
func db_readAll_ {{- .TableName -}} (ctx context.Context, clause string, args []any) ([] Table_ {{- .TableName -}} _response, error) {
	data := []Table_ {{- .TableName -}} _response{}
	
	query := `SELECT {{- " " -}}

	{{- if eq (len .PrimaryKey) 0 -}} "{{- .TableName -}} "."__ID", {{ end -}}

	{{- $n := len .Columns  -}}
	{{ $tableName := .TableName  }}

	{{- range $column := .Columns -}}
		{{- $n = decrease $n -}}
		
		{{- if $column.Hash -}}
			{{- continue -}}
		{{- else if $column.ForeignTable -}}
			{{- $foreignColumns := getTableColumns $column.ForeignTable -}}
			{{- $fNum := len $foreignColumns -}}

			{{- range $foreignColumn := $foreignColumns -}}
				{{- $fNum = decrease $fNum -}}

				{{- if $foreignColumn.Hash -}}
					{{- continue -}}
				{{- end -}}

				" {{- $column.ForeignTable -}} "." {{- $foreignColumn.ColumnName -}}"
				
				{{- if gt $fNum 0 -}}
					{{- ", " -}}
				{{- end -}}
			{{- end -}}

		{{- else -}}
			" {{- $tableName -}} "." {{- $column.ColumnName -}}"
		{{- end -}}

		{{- if gt $n 0 -}}
			{{- ", " -}}
		{{- end -}}

	{{- end -}}

	{{- " " -}} FROM "{{ $tableName }}"

	{{- range $column := .Columns -}}
		{{- if $column.ForeignTable -}}
			{{- " INNER JOIN " -}} "{{- $column.ForeignTable -}}" 
			{{- " ON " -}} "{{- $tableName -}} "."  {{- $column.ColumnName -}}"
			{{- " = " -}} "{{- $column.ForeignTable -}} "."  {{- $column.ForeignField -}}"
		{{- end -}}
	{{- end -}}
	`

	query += clause

	preparedQuery, err := db.PrepareContext(ctx, query)

	if err != nil {
		return data, err
	}

	defer preparedQuery.Close()

	rows, err := preparedQuery.QueryContext(ctx, args...)

	if err != nil {
		return data, err
	}

	defer rows.Close()

	for rows.Next() {
		item := Table_ {{- .TableName -}} _response{}
		
		rows.Scan(

		{{- if eq (len .PrimaryKey) 0 -}}
			&item.ID__,
		{{- end -}}

		{{- $n = len .Columns  -}}

		{{- range $column := .Columns -}}
			{{- $n = decrease $n -}}
			
			{{- if $column.Hash -}}
				{{- continue -}}
			{{- else if $column.ForeignTable -}}
				{{- $foreignColumns := getTableColumns $column.ForeignTable -}}
				{{- $fNum := len $foreignColumns -}}

				{{- range $foreignColumn := $foreignColumns -}}
					{{- $fNum = decrease $fNum -}}

					{{- if $foreignColumn.Hash -}}
						{{- continue -}}
					{{- else if HasSuffix $foreignColumn.DataType "[]" -}}
						pq.Array(&item.Fkey_ {{- $column.ColumnName -}} .Column_ {{- $foreignColumn.ColumnName -}} )
					{{- else -}}
						&item.Fkey_ {{- $column.ColumnName -}} .Column_ {{- $foreignColumn.ColumnName -}}
					{{- end -}}

					{{- if gt $fNum 0 -}}
						{{- ", " -}}
					{{- end -}}
				{{- end -}}

			{{- else -}}
				{{- if HasSuffix $column.DataType "[]" -}}
					pq.Array(&item.Column_  {{- $column.ColumnName -}} )
				{{- else -}}
					&item.Column_ {{- $column.ColumnName -}}
				{{- end -}}
			{{- end -}}

			{{- if gt $n 0 -}}
				{{- ", " -}}
			{{- end -}}

		{{- end -}}

		)

		data = append(data, item)
	}

	return data, nil
}

{{- end -}}

{{ define "readByPK" }}
func db_read_ {{- .TableName -}} _ByPK(ctx context.Context, id string) (Table_ {{- .TableName -}} _response, error) {
	item := Table_ {{- .TableName -}} _response {}

	args := []any{id}

	query := `SELECT {{- " " -}}

	{{- if eq (len .PrimaryKey) 0 -}} "{{- .TableName -}} "."__ID", {{ end -}}

	{{- $n := len .Columns  -}}
	{{- $tableName := .TableName -}}

	{{- range $column := .Columns -}}
		{{- $n = decrease $n -}}

		{{- if $column.Hash -}}
			{{- continue -}}
		{{- else if $column.ForeignTable -}}
			{{- $foreignColumns := getTableColumns $column.ForeignTable -}}
			{{- $fNum := len $foreignColumns -}}

			{{- range $foreignColumn := $foreignColumns -}}
				{{- $fNum = decrease $fNum -}}

				{{- if $foreignColumn.Hash -}}
					{{- continue -}}
				{{- end -}}

				" {{- $column.ForeignTable -}} "." {{- $foreignColumn.ColumnName -}}"
				
				{{- if gt $fNum 0 -}}
					{{- ", " -}}
				{{- end -}}
			{{- end -}}

		{{- else -}}
			" {{- $tableName -}} "." {{- $column.ColumnName -}}"
		{{- end -}}

		{{- if gt $n 0 -}}
			{{- ", " -}}
		{{- end -}}

	{{- end -}}

	{{- " " -}} FROM "{{ $tableName }}"

	{{- range $column := .Columns -}}
		{{- if $column.ForeignTable -}}
			{{- " INNER JOIN " -}} "{{- $column.ForeignTable -}}" 
			{{- " ON " -}} "{{- $tableName -}} "."  {{- $column.ColumnName -}}"
			{{- " = " -}} "{{- $column.ForeignTable -}} "."  {{- $column.ForeignField -}}"
		{{- end -}}
	{{- end -}}

	{{- " WHERE " -}}
	
	{{- if eq (len .PrimaryKey) 0 -}}
		 "{{- .TableName -}} "."__ID" 
	{{- else -}}
		"{{- .TableName -}} "."  {{- .PrimaryKey -}}" 
	{{- end -}}
	
	{{- " " -}} = $1`

	{{ if len .TableAuth.ReadAuth.Priviliges }}
		var ctxVal any;
	{{ end }}

	{{ $tableName := .TableName }}

	{{ range $field := .TableAuth.ReadAuth.Priviliges }}
		ctxVal = ctx.Value("{{ $field }}")
		if ctxVal != nil {
			value := ctxVal.(string)
			args = append(args, value)
			query += fmt.Sprintf(` AND "{{ $tableName }}"."{{ $field }}" = $%d`, len(args))
		}
	{{ end }}

	stmt, err := db.PrepareContext(ctx, query)

	if err != nil {
		return item, err
	}

	defer stmt.Close()

	if err := stmt.QueryRowContext(ctx, args...).Scan(

	{{- if eq (len .PrimaryKey) 0 -}}
		{{- "&item.ID__," -}}
	{{- end -}}

	{{- $n := len .Columns -}}

	{{- range $column := .Columns -}}
		{{- $n = decrease $n -}}

		{{- if $column.Hash -}}
			{{- continue -}}

		{{- else if $column.ForeignTable -}}
			{{- $foreignColumns := getTableColumns $column.ForeignTable -}}
			{{- $fNum := len $foreignColumns -}}

			{{- range $foreignColumn := $foreignColumns -}}
				{{- $fNum = decrease $fNum -}}

				{{- if $foreignColumn.Hash -}}
					{{- continue -}}
				{{- else if HasSuffix $foreignColumn.DataType "[]" -}}
					pq.Array(&item.Fkey_ {{- $column.ColumnName -}} .Column_ {{- $foreignColumn.ColumnName -}} )
				{{- else -}}
					&item.Fkey_ {{- $column.ColumnName -}} .Column_ {{- $foreignColumn.ColumnName -}}
				{{- end -}}

				{{- if gt $fNum 0 -}}
					{{- ", " -}}
				{{- end -}}
			{{- end -}}

		{{- else -}}
			{{- if HasSuffix $column.DataType "[]" -}}
				pq.Array(&item.Column_  {{- $column.ColumnName -}} )
			{{- else -}}
				&item.Column_ {{- $column.ColumnName -}}
			{{- end -}}
		{{- end -}}

		{{- if gt $n 0 -}}
			{{- ", " -}}
		{{- end -}}

	{{- end -}}
	
	
	); err != nil {
		return item, err
	}

	return item, nil
}

{{ end }}

{{ define "update" }}

func db_update_ {{- .TableName -}} (ctx context.Context, id string, item *Table_ {{- .TableName -}}) error {
	args := []any{
	{{- if eq (len .PrimaryKey) 0 -}}
		item.ID__,
	{{- end -}}
	
	{{- range $column := .Columns -}}
		{{- if HasSuffix $column.DataType "[]" -}}
			pq.Array(item.Column_  {{- $column.ColumnName -}} ),
		{{- else -}}
			item.Column_ {{- $column.ColumnName -}},
		{{- end -}} 
	{{- end -}}
	
	id}

	query := `UPDATE "{{- .TableName -}}" SET {{- " " -}}

	{{- $idx := 1 -}}
	{{- $n := len .Columns -}}

	{{- if eq (len .PrimaryKey) 0 -}}
		"__ID" = $1, {{- " " -}}
		{{- $idx = increase $idx -}}
		{{- $n = increase $n -}}
	{{- end -}}

	{{- range $column := .Columns -}}
		"{{ $column.ColumnName -}}" = $ {{- $idx -}}

		{{- if lt $idx $n -}}
			{{- ", " -}}
		{{- end -}}

		{{- $idx = increase $idx -}}

	{{- end -}}

	{{- " " -}} WHERE {{- " " -}}
	
	{{- if eq (len .PrimaryKey) 0 -}}
		"__ID" = $ {{- $idx -}}
	{{- else -}}
		"{{ .PrimaryKey }}" = $ {{- $idx -}}
	{{- end -}}

	`

	{{ if len .TableAuth.WriteAuth.Priviliges }}
		var ctxVal any;
	{{ end }}

	{{ $tableName := .TableName }}

	{{ range $field := .TableAuth.WriteAuth.Priviliges }}
		ctxVal = ctx.Value("{{ $field }}")
		if ctxVal != nil {
			value := ctxVal.(string)
			args = append(args, value)
			query += fmt.Sprintf(` AND "{{ $tableName }}"."{{ $field }}" = $%d`, len(args))
		}
	{{ end }}
	
	stmt, err := db.PrepareContext(ctx, query)

	if err != nil {
		return err
	}

	defer stmt.Close()

	result, err := stmt.ExecContext(ctx, args...)

	if err != nil {
		return err
	}

	if rowsUpdated, _ := result.RowsAffected(); rowsUpdated == 0 {
		return errors.New("no row found with provided id")
	}

	return nil
}

{{ end }}

{{ define "delete" }}

func db_delete_ {{- .TableName -}} (ctx context.Context, id string) error {
	args := []any{id}

	query := `DELETE FROM "{{- .TableName -}}" WHERE {{- " " -}}
	
	{{- if eq (len .PrimaryKey) 0 -}}
		"__ID" = $1
	{{- else -}}
		"{{- .PrimaryKey -}}" = $1
	{{- end -}}

	`

	{{ if len .TableAuth.WriteAuth.Priviliges }}
		var ctxVal any;
	{{ end }}
	
	{{ $tableName := .TableName }}

	{{ range $field := .TableAuth.WriteAuth.Priviliges }}
		ctxVal = ctx.Value("{{ $field }}")
		if ctxVal != nil {
			value := ctxVal.(string)
			args = append(args, value)
			query += fmt.Sprintf(` AND "{{ $tableName }}"."{{ $field }}" = $%d`, len(args))
		}
	{{ end }}

	stmt, err := db.PrepareContext(ctx, query)

	if err != nil {
		return err
	}

	defer stmt.Close()

	result, err := stmt.ExecContext(ctx, args...)

	if err != nil {
		return err
	}

	if rowsDeleted, _ := result.RowsAffected(); rowsDeleted == 0 {
		return errors.New("no row found with provided id")
	}

	return nil
}

{{ end }}

{{ define "login" }}

func db_auth_login(ctx context.Context, login_data *Login_Input) (Login_Output, error) {
	stmt, err := db.PrepareContext(ctx, `SELECT "username", "password"
	
	{{- range $column := .Columns -}}
		{{- if eq $column.ColumnName "role" -}}
			, "role"
			{{- break -}}
		{{- end -}}
	{{- end -}}

	{{- range $field := getOrgFields -}}
		, "{{- $field }}"
	{{- end -}}
	
	{{- " " -}} FROM "{{ .TableName }}" WHERE username = $1`)

	var item Login_Output

	if err != nil {
	}

	defer stmt.Close()

	err = stmt.QueryRowContext(ctx, login_data.Username).Scan(&item.Username, &item.Password
	
	{{- range $column := .Columns -}}
		{{- if eq $column.ColumnName "role" -}}
			, &item.Role
			{{- break -}}
		{{- end -}}
	{{- end -}}

	{{- range $field := getOrgFields -}}
		, &item. {{- capitalize $field }}
	{{- end -}}

	)

	if err != nil {
		return item, err
	}

	return item, nil
}

{{ end }}