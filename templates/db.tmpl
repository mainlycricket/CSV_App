package main

import (
	"database/sql"
	"errors"
	"fmt"
)

const (
	host     = "localhost"
	port     = 5432
	user     = "postgres"
	password = "password"
	dbname   = "CSV_App"
)

func connectDB() (*sql.DB, error) {
	connStr := fmt.Sprintf("host=%s port=%d user=%s password=%s dbname=%s", host, port, user, password, dbname)

	db, err := sql.Open("postgres", connStr)

	if err != nil {
		return nil, err
	}

	if err := db.Ping(); err != nil {
		return nil, err
	}

	return db, nil
}

{{ range $tableName, $table := . }}

// {{ $tableName }} CRUD

{{ template "insert" $table }}
{{ template "readAll" $table }}
{{ template "readByPK" $table }}
{{ template "update" $table }}
{{ template "delete" $table }}

{{- end -}}

{{- define "insert" -}}

func db_insert_ {{- .TableName -}} ({{ .TableName }}_ *Table_ {{- .TableName -}}) error {
	stmt, err := db.Prepare(`INSERT INTO "{{- .TableName -}}" (

	{{- $n := len .Columns -}}

	{{- range $columnName, $column := .Columns -}}
		"{{- $columnName -}}"
		{{- $n = decrease $n -}}
		{{- if gt $n 0 -}}
			,
		{{- end -}}
	{{- end -}}

	) VALUES ( 

	{{- $idx := 1 -}}
	{{- $n := len .Columns -}}

	{{- range $columnName, $column := .Columns -}}
		${{- $idx -}}
		{{- if lt $idx $n -}}
			,
		{{- end -}}
		{{- $idx = increase $idx -}}
	{{- end -}}

	)`)

	if err != nil {
		return err
	}

	defer stmt.Close()

	_, err = stmt.Exec(

	{{- $n = len $.Columns -}}
	{{- $tableName := .TableName -}}

	{{- range $columnName, $column := .Columns -}}
		{{- $tableName -}}_.Column_ {{- $columnName -}}

		{{- $n = decrease $n -}}
		{{- if gt $n 0 -}}
			,
		{{- end -}}

	{{- end -}}

	)

	if err != nil {
		return err
	}

	return nil
}

{{ end }}


{{- define "readAll" -}}

func db_readAll_ {{- .TableName -}}  () ([]Table_ {{- .TableName -}} , error) {
	rows, err := db.Query(`SELECT * FROM "{{- .TableName -}}"`)
	
	data := []Table_ {{- .TableName -}}  {}

	if err != nil {
		return data, err
	}

	defer rows.Close()

	for rows.Next() {
		item := Table_ {{- .TableName -}} {}
		
		rows.Scan(

		{{- if eq (len .PrimaryKey) 0 -}}
			&item.ID__,
		{{- end -}}

		{{- $n := len .Columns  -}}

		{{- range $columnName, $column := .Columns -}}

			{{- $n = decrease $n -}}

			&item.Column_ {{- $columnName -}}

			{{- if gt $n 0 -}}
				,
			{{- end -}}

		{{- end -}}

		)

		data = append(data, item)
	}

	return data, nil
}

{{- end -}}

{{ define "readByPK" }}

func db_read_ {{- .TableName -}} _ByPK(pk {{ getPkType . }}) (Table_ {{- .TableName -}}, error) {
	stmt, err := db.Prepare(`SELECT * FROM "{{- .TableName -}}" WHERE 
	
	{{- if eq (len .PrimaryKey) 0 -}}
		{{- " \"__ID\" " -}}
	{{- else -}}
		{{- " " -}} "{{- .PrimaryKey -}}" {{- " " -}}
	{{- end -}}
	= $1`)

	item := Table_ {{- .TableName -}} {}

	if err != nil {
		return item, err
	}

	if err := stmt.QueryRow(pk).Scan(

	{{- if eq (len .PrimaryKey) 0 -}}
		{{- "&item.ID__," -}}
	{{- end -}}

	{{- $n := len .Columns -}}

	{{- range $columnName, $column := .Columns -}}
		&item.Column_ {{- $columnName -}}

		{{- $n = decrease $n -}}
		{{- if gt $n 0 -}}
			,
		{{- end -}}

	{{- end -}}
	
	
	); err != nil {
		return item, err
	}

	return item, nil
}

{{ end }}

{{ define "update" }}

func db_update_ {{- .TableName -}} (item *Table_ {{- .TableName -}}, pk {{ getPkType . }}) error {
	stmt, err := db.Prepare(`UPDATE "{{- .TableName -}}" SET {{- " " -}}

	{{- $idx := 1 -}}
	{{- $n := len .Columns -}}

	{{- if eq (len .PrimaryKey) 0 -}}
		"__ID" = $1,
		{{- $idx = increase $idx -}}
		{{- $n = increase $n -}}
	{{- end -}}

	{{- range $columnName, $column := .Columns -}}
		"{{ $columnName -}}" = $ {{- $idx -}}

		{{- if lt $idx $n -}}
			,
		{{- end -}}

		{{- $idx = increase $idx -}}

	{{- end -}}

	{{- " " -}} WHERE {{- " " -}}
	
	{{- if eq (len .PrimaryKey) 0 -}}
		"__ID" == $ {{- $idx -}}
	{{- else -}}
		"{{ .PrimaryKey }}" = $ {{- $idx -}}
	{{- end -}}

	`)

	if err != nil {
		return err
	}

	defer stmt.Close()

	result, err := stmt.Exec(

	{{- if eq (len .PrimaryKey) 0 -}}
		item.ID__,
	{{- end -}}
	
	{{- range $columnName, $column := .Columns -}}
		item.Column_ {{- $columnName -}}, 
	{{- end -}}
	
	pk)

	if err != nil {
		return err
	}

	if rowsUpdated, _ := result.RowsAffected(); rowsUpdated == 0 {
		return errors.New("no row found with provided pk")
	}

	return nil
}

{{ end }}

{{ define "delete" }}

func db_delete_ {{- .TableName -}} (pk {{ getPkType . }}) error {
	stmt, err := db.Prepare(`DELETE FROM "{{- .TableName -}}" WHERE {{- " " -}}
	
	{{- if eq (len .PrimaryKey) 0 -}}
		"__ID" = $1
	{{- else -}}
		"{{- .PrimaryKey -}}" = $1
	{{- end -}}

	`)

	if err != nil {
		return err
	}

	result, err := stmt.Exec(pk)

	if err != nil {
		return err
	}

	if rowsDeleted, _ := result.RowsAffected(); rowsDeleted == 0 {
		return errors.New("no row found with provided pk")
	}

	return nil
}

{{ end }}