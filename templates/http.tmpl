package main

import (
	"encoding/json"
	"context"
	"fmt"
	"log"
	"net/http"
	"net/url"
	"slices"
	"time"
)

type ApiResponse struct {
	Success bool   `json:"success"`
	Message string `json:"message"`
	Data    any    `json:"data"`
}

func getJsonResponse(success bool, message string, data any) []byte {
	response := ApiResponse{Success: success, Message: message, Data: data}
	jsonData, err := json.Marshal(response)

	if err != nil {
		response := ApiResponse{Success: false, Message: "failed to jsonify response"}
		jsonData, _ := json.Marshal(response)
		return jsonData
	}

	return jsonData
}

func startServer() *http.Server {
	{{ range $table := . }}
		{{ if .IsAuthTable }}
		// AUTH routes
		http.HandleFunc("POST /__auth/register", api_create_ {{- .TableName -}})
		http.HandleFunc("POST /__auth/login", api_login_user)
		http.HandleFunc("GET /__auth/logout", api_logout_user)
		{{ else }}
		// {{ .TableName }} routes
		http.HandleFunc("POST /{{- .TableName -}}", api_create_ {{- .TableName -}})
		http.HandleFunc("GET /{{- .TableName -}}", api_getAll_ {{- .TableName -}})
		http.HandleFunc("GET /{{- .TableName -}}ByPK", api_getByPk_ {{- .TableName -}})
		http.HandleFunc("PUT /{{- .TableName -}}", api_update_ {{- .TableName -}})
		http.HandleFunc("DELETE /{{- .TableName -}}", api_delete_ {{- .TableName -}})
		{{ end }}
	{{ end }}

	s := &http.Server{
		Addr:           ":8080",
	}

	return s
}

{{ range $table := . }}
	{{- if .IsAuthTable -}}
	// AUTH handler functions
	{{ template "create" $table }}
	{{ template "login" $table }}
	{{ template "logout" $table }}
	{{ else }}
	// {{ .TableName }} handler functions
	{{ template "create" $table }}
	{{ template "readAll" $table }}
	{{ template "readByPK" $table }}
	{{ template "update" $table }}
	{{ template "delete" $table }}
	{{ end }}
{{ end }}

{{ define "create" }}
func api_create_ {{- .TableName -}} (w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")

	{{- $userField := .TableAuth.UserField -}}
	{{- $orgField := .TableAuth.OrgField -}}

	{{ if .TableAuth.WriteAuth.BasicAuth }}
		{{- if or $userField $orgField -}} 
			{{- printf "\n\n claims" -}}
		{{- else -}}
			{{- printf "\n\n _" -}}
		{{- end -}}

		, err := authorizeRequest(r, {{- printf "%#v" .TableAuth.WriteAuth.AllowedRoles -}})
		if err != nil {
			w.WriteHeader(http.StatusUnauthorized)
			log.Printf("%s %s %v: %v", r.Method, r.URL.Path, http.StatusUnauthorized, err)
			w.Write(getJsonResponse(false, "unauthorized request", nil))
			return
		}
	{{ end }}

	var item Table_ {{- .TableName }}

	{{ if and .TableAuth.WriteAuth.AllowedRoles (or $userField $orgField) }}
		specialRoles := {{ printf "%#v" .TableAuth.WriteAuth.SpecialRoles }}

		if !slices.Contains(specialRoles, claims["role"].(string) ) {
			{{- if $userField -}}
				item.Column_ {{- $userField -}} = claims["username"].(string);
			{{- end -}}

			{{- if $orgField -}}
				item.Column_ {{- $orgField -}} = claims["orgId"].(string);
			{{- end -}}
		}
	{{ end }}

	if err := json.NewDecoder(r.Body).Decode(&item); err != nil {
		message := fmt.Sprintf("error while reading request body: %v", err)
		log.Print(message)
		w.WriteHeader(http.StatusBadRequest)
		w.Write(getJsonResponse(false, message, nil))
		return
	}

	ctx := r.Context()

	if err := db_insert_ {{- .TableName -}} (ctx, &item); err != nil {
		message := fmt.Sprintf("error while creating: %v", err)
		log.Print(message)
		w.WriteHeader(http.StatusBadRequest)
		w.Write(getJsonResponse(false, message, nil))
		return
	}

	w.WriteHeader(http.StatusCreated)
	w.Write(getJsonResponse(true, "created successfully", nil))
}
{{ end }}

{{ define "readAll" }}
func api_getAll_ {{- .TableName -}} (w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")

	{{- $userField := .TableAuth.UserField -}}
	{{- $orgField := .TableAuth.OrgField -}}

	{{ if .TableAuth.ReadAuth.BasicAuth }}
		{{- if or $userField $orgField -}} 
			{{- printf "\n\n claims" -}}
		{{- else -}}
			{{- printf "\n\n _" -}}
		{{- end -}}

		, err := authorizeRequest(r, {{- printf "%#v" .TableAuth.ReadAuth.AllowedRoles -}})
		if err != nil {
			w.WriteHeader(http.StatusUnauthorized)
			log.Printf("%s %s %v: %v", r.Method, r.URL.Path, http.StatusUnauthorized, err)
			w.Write(getJsonResponse(false, "unauthorized request", nil))
			return
		}
	{{ end }}

	queryValues, err := url.ParseQuery(r.URL.RawQuery)

	{{ if and .TableAuth.ReadAuth.AllowedRoles (or $userField $orgField) }}
		specialRoles := {{ printf "%#v" .TableAuth.ReadAuth.SpecialRoles }}

		if !slices.Contains(specialRoles, claims["role"].(string) ) {
			{{ if $userField }}
				username := claims["username"].(string)
				queryValues["{{ $userField }}"] = []string{username}
			{{ end }}

			{{ if $orgField }}
				orgId := claims["orgId"].(string)
				queryValues["{{ $orgField }}"] = []string{orgId}
			{{ end }}
		}
	{{ end }}

	if err != nil {
		message := fmt.Sprintf("error while parsing request query: %v", err)
		log.Print(message)
		w.WriteHeader(http.StatusBadRequest)
		w.Write(getJsonResponse(false, message, nil))
		return
	}

	var clause string
	var args []any

	if len(queryValues) > 0 {
		clause, args, err = getQueryClauseArgs(queryValues, Map_ {{- .TableName -}}, "{{- .TableName -}}")

		if err != nil {
			message := fmt.Sprintf("error while parsing request query: %v", err)
			log.Print(message)
			w.WriteHeader(http.StatusBadRequest)
			w.Write(getJsonResponse(false, message, nil))
			return
		}
	}

	ctx := r.Context()
	data, err := db_readAll_ {{- .TableName -}} (ctx, clause, args)

	if err != nil {
		message := fmt.Sprintf("error while reading: %v", err)
		log.Print(message)
		w.WriteHeader(http.StatusInternalServerError)
		w.Write(getJsonResponse(false, message, nil))
		return
	}

	w.Write(getJsonResponse(true, "data fetched successfully", data))
}
{{ end }}

{{ define "readByPK" }}
func api_getByPk_ {{- .TableName -}} (w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")

	{{- $userField := .TableAuth.UserField -}}
	{{- $orgField := .TableAuth.OrgField -}}

	{{ if .TableAuth.ReadAuth.BasicAuth }}
		{{- if or $userField $orgField -}} 
			{{- printf "\n\n claims" -}}
		{{- else -}}
			{{- printf "\n\n _" -}}
		{{- end -}}

		, err := authorizeRequest(r, {{- printf "%#v" .TableAuth.ReadAuth.AllowedRoles -}})
		if err != nil {
			w.WriteHeader(http.StatusUnauthorized)
			log.Printf("%s %s %v: %v", r.Method, r.URL.Path, http.StatusUnauthorized, err)
			w.Write(getJsonResponse(false, "unauthorized request", nil))
			return
		}
	{{ end }}

	queryValues, err := url.ParseQuery(r.URL.RawQuery)

	if err != nil {
		message := fmt.Sprintf("error while parsing request query: %v", err)
		log.Print(message)
		w.WriteHeader(http.StatusBadRequest)
		w.Write(getJsonResponse(false, message, nil))
		return
	}

	ctx := r.Context()
	id := getPkParam(queryValues, "{{- getPkType . -}}")
	if len(id) == 0 {
		message := "missing id param in request query"
		log.Print(message)
		w.WriteHeader(http.StatusBadRequest)
		w.Write(getJsonResponse(false, message, nil))
		return
	}

	{{ if and .TableAuth.ReadAuth.AllowedRoles (or $userField $orgField) }}
		specialRoles := {{ printf "%#v" .TableAuth.ReadAuth.SpecialRoles }}

		if !slices.Contains(specialRoles, claims["role"].(string) ) {
			{{ if $userField }}
				username := claims["username"].(string)
				ctx = context.WithValue(ctx, "{{ $userField }}", username)
			{{ end }}

			{{ if $orgField }}
				orgId := claims["orgId"].(string)
				ctx = context.WithValue(ctx, "{{ $orgField }}", orgId)
			{{ end }}
		}
	{{ end }}

	data, err := db_read_ {{- .TableName -}} _ByPK (ctx, id)

	if err != nil {
		message := fmt.Sprintf("error while reading data: %v", err)
		log.Print(message)
		w.WriteHeader(http.StatusBadRequest)
		w.Write(getJsonResponse(false, message, nil))
		return
	}

	w.Write(getJsonResponse(true, "found data", data))
}
{{ end }}

{{ define "update" }}
func api_update_ {{- .TableName -}} (w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")

	{{- $userField := .TableAuth.UserField -}}
	{{- $orgField := .TableAuth.OrgField -}}

	{{ if .TableAuth.WriteAuth.BasicAuth }}
		{{- if or $userField $orgField -}} 
			{{- printf "\n\n claims" -}}
		{{- else -}}
			{{- printf "\n\n _" -}}
		{{- end -}}

		, err := authorizeRequest(r, {{- printf "%#v" .TableAuth.WriteAuth.AllowedRoles -}})
		if err != nil {
			w.WriteHeader(http.StatusUnauthorized)
			log.Printf("%s %s %v: %v", r.Method, r.URL.Path, http.StatusUnauthorized, err)
			w.Write(getJsonResponse(false, "unauthorized request", nil))
			return
		}
	{{ end }}

	queryValues, err := url.ParseQuery(r.URL.RawQuery)

	if err != nil {
		message := fmt.Sprintf("error while parsing request query: %v", err)
		log.Print(message)
		w.WriteHeader(http.StatusBadRequest)
		w.Write(getJsonResponse(false, message, nil))
		return
	}

	ctx := r.Context()
	id := getPkParam(queryValues, "{{- getPkType . -}}")
	if len(id) == 0 {
		message := "missing id param in request query"
		log.Print(message)
		w.WriteHeader(http.StatusBadRequest)
		w.Write(getJsonResponse(false, message, nil))
		return
	}

	var item Table_ {{- .TableName }}

	{{ if and .TableAuth.WriteAuth.AllowedRoles (or $userField $orgField) }}
		specialRoles := {{ printf "%#v" .TableAuth.WriteAuth.SpecialRoles }}

		if !slices.Contains(specialRoles, claims["role"].(string) ) {
			{{- if $userField -}}
				username := claims["username"].(string)
				ctx = context.WithValue(ctx, "{{ $userField }}", username)
				item.Column_ {{- $userField -}} = username;
			{{- end -}}

			{{- if $orgField -}}
				orgId := claims["orgId"].(string)
				ctx = context.WithValue(ctx, "{{ $orgField }}", orgId)
				item.Column_ {{- $orgField -}} = orgId;
			{{- end -}}
		}
	{{ end }}

	if err := json.NewDecoder(r.Body).Decode(&item); err != nil {
		message := fmt.Sprintf("error while reading request body: %v", err)
		log.Print(message)
		w.WriteHeader(http.StatusBadRequest)
		w.Write(getJsonResponse(false, message, nil))
		return
	}

	if err := db_update_ {{- .TableName -}} (ctx, id, &item); err != nil {
		message := fmt.Sprintf("error while updating : %v", err)
		log.Print(message)
		w.WriteHeader(http.StatusBadRequest)
		w.Write(getJsonResponse(false, message, nil))
		return
	}

	w.Write(getJsonResponse(true, "updated successfully", nil))
}
{{ end }}

{{ define "delete" }}
func api_delete_ {{- .TableName -}} (w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")

	{{- $userField := .TableAuth.UserField -}}
	{{- $orgField := .TableAuth.OrgField -}}

	{{ if .TableAuth.WriteAuth.BasicAuth }}
		{{- if or $userField $orgField -}} 
			{{- printf "\n\n claims" -}}
		{{- else -}}
			{{- printf "\n\n _" -}}
		{{- end -}}

		, err := authorizeRequest(r, {{- printf "%#v" .TableAuth.WriteAuth.AllowedRoles -}})
		if err != nil {
			w.WriteHeader(http.StatusUnauthorized)
			log.Printf("%s %s %v: %v", r.Method, r.URL.Path, http.StatusUnauthorized, err)
			w.Write(getJsonResponse(false, "unauthorized request", nil))
			return
		}
	{{ end }}

	queryValues, err := url.ParseQuery(r.URL.RawQuery)

	if err != nil {
		message := fmt.Sprintf("error while parsing request query: %v", err)
		log.Print(message)
		w.WriteHeader(http.StatusBadRequest)
		w.Write(getJsonResponse(false, message, nil))
		return
	}

	ctx := r.Context()
	id := getPkParam(queryValues, "{{- getPkType . -}}")
	if len(id) == 0 {
		message := "missing id param in request query"
		log.Print(message)
		w.WriteHeader(http.StatusBadRequest)
		w.Write(getJsonResponse(false, message, nil))
		return
	}

	{{ if and .TableAuth.WriteAuth.AllowedRoles (or $userField $orgField) }}
		specialRoles := {{ printf "%#v" .TableAuth.WriteAuth.SpecialRoles }}

		if !slices.Contains(specialRoles, claims["role"].(string) ) {
			{{ if $userField }}
				username := claims["username"].(string)
				ctx = context.WithValue(ctx, "{{ $userField }}", username)
			{{ end }}

			{{ if $orgField }}
				orgId := claims["orgId"].(string)
				ctx = context.WithValue(ctx, "{{ $orgField }}", orgId)
			{{ end }}
		}
	{{ end }}

	if err := db_delete_ {{- .TableName -}} (ctx, id); err != nil {
		message := fmt.Sprintf("error while deleting: %v", err)
		log.Print(message)
		w.WriteHeader(http.StatusBadRequest)
		w.Write(getJsonResponse(false, message, nil))
		return
	}

	w.Write(getJsonResponse(true, "deleted successfully", nil))
}
{{ end }}

{{- define "login" }}
func api_login_user(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")

	var credentials Login_Input

	if err := json.NewDecoder(r.Body).Decode(&credentials); err != nil {
		message := fmt.Sprintf("error while reading request body: %v", err)
		log.Print(message)
		w.WriteHeader(http.StatusBadRequest)
		w.Write(getJsonResponse(false, message, nil))
		return
	}

	ctx := r.Context()

	user, err := db_auth_login(ctx, &credentials)

	if err != nil {
		message := fmt.Sprintf("error while logging in: %v", err)
		log.Print(message)
		w.WriteHeader(http.StatusUnauthorized)
		w.Write(getJsonResponse(false, "login failed!", nil))
		return
	}

	if err := comparePassword(credentials.Password.String, user.Password.String); err != nil {
		message := fmt.Sprintf("error while logging in: %v", err)
		log.Print(message)
		w.WriteHeader(http.StatusUnauthorized)
		w.Write(getJsonResponse(false, "login failed!", nil))
		return
	}

	token, err := getSignedToken(user.Username.String
	
	{{- range $column := .Columns -}}

		{{- if eq $column.ColumnName "role" -}}
			, user.Role.String
			
		{{- else if eq $column.ColumnName "orgId" -}}
			, user.OrgId.String
		{{- end -}}
	{{- end -}}
	)

	if err != nil {
		message := fmt.Sprintf("error while logging in: %v", err)
		log.Print(message)
		w.WriteHeader(http.StatusUnauthorized)
		w.Write(getJsonResponse(false, "login failed!", nil))
		return
	}

	cookie := &http.Cookie{
		Name:     "access_token",
		Value:    token,
		Expires:  time.Now().Add(30 * 24 * time.Hour), // expires in 30 days
		HttpOnly: true,
		SameSite: http.SameSiteLaxMode,
		Path:     "/",
		Secure:   true,
	}

	http.SetCookie(w, cookie)

	w.WriteHeader(http.StatusOK)
	w.Write(getJsonResponse(true, "logged in successfully", nil))
}
{{ end }}


{{- define "logout" }}
func api_logout_user(w http.ResponseWriter, _ *http.Request) {
	cookie := &http.Cookie{
		Name:    "access_token",
		Value:   "",
		Expires: time.Now(),
		Path:    "/",
	}
	http.SetCookie(w, cookie)

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(getJsonResponse(true, "logged out successfully", nil))
}
{{ end }}