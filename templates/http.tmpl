package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"net/url"
)

type ApiResponse struct {
	Success bool   `json:"success"`
	Message string `json:"message"`
	Data    any    `json:"data"`
}

func getJsonResponse(success bool, message string, data any) []byte {
	response := ApiResponse{Success: success, Message: message, Data: data}
	jsonData, err := json.Marshal(response)

	if err != nil {
		response := ApiResponse{Success: false, Message: "failed to jsonify response"}
		jsonData, _ := json.Marshal(response)
		return jsonData
	}

	return jsonData
}

func startServer() *http.Server {
	{{ range $tableName, $table := . }}
		// {{ $tableName }} routes
		http.HandleFunc("POST /{{- $tableName -}}", api_create_ {{- $tableName -}})
		http.HandleFunc("GET /{{- $tableName -}}", api_getAll_ {{- $tableName -}})
		http.HandleFunc("GET /{{- $tableName -}}ByPK", api_getByPk_ {{- $tableName -}})
		http.HandleFunc("PUT /{{- $tableName -}}", api_update_ {{- $tableName -}})
		http.HandleFunc("DELETE /{{- $tableName -}}", api_delete_ {{- $tableName -}})
	{{ end }}

	s := &http.Server{
		Addr:           ":8080",
	}

	return s
}

{{ range $tableName, $table := . }}

	// {{ $tableName }} handler functions
	{{ template "create" $table }}
	{{ template "readAll" $table }}
	{{ template "readByPK" $table }}
	{{ template "update" $table }}
	{{ template "delete" $table }}
{{ end }}

{{ define "create" }}
func api_create_ {{- .TableName -}} (w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")

	var item Table_ {{- .TableName }}

	if err := json.NewDecoder(r.Body).Decode(&item); err != nil {
		message := fmt.Sprintf("error while reading request body: %v", err)
		log.Print(message)
		w.WriteHeader(http.StatusBadRequest)
		w.Write(getJsonResponse(false, message, nil))
		return
	}

	ctx := r.Context()

	if err := db_insert_ {{- .TableName -}} (ctx, &item); err != nil {
		message := fmt.Sprintf("error while creating: %v", err)
		log.Print(message)
		w.WriteHeader(http.StatusBadRequest)
		w.Write(getJsonResponse(false, message, nil))
		return
	}

	w.WriteHeader(http.StatusCreated)
	w.Write(getJsonResponse(true, "created successfully", nil))
}
{{ end }}

{{ define "readAll" }}
func api_getAll_ {{- .TableName -}} (w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")

	ctx := r.Context()

	data, err := db_readAll_ {{- .TableName -}} (ctx)

	if err != nil {
		message := fmt.Sprintf("error while reading: %v", err)
		log.Print(message)
		w.WriteHeader(http.StatusInternalServerError)
		w.Write(getJsonResponse(false, message, nil))
		return
	}

	w.Write(getJsonResponse(true, "data fetched successfully", data))
}
{{ end }}

{{ define "readByPK" }}
func api_getByPk_ {{- .TableName -}} (w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")

	values, err := url.ParseQuery(r.URL.RawQuery)

	if err != nil {
		message := fmt.Sprintf("error while parsing request query: %v", err)
		log.Print(message)
		w.WriteHeader(http.StatusBadRequest)
		w.Write(getJsonResponse(false, message, nil))
		return
	}

	id := values.Get("id")
	ctx := r.Context()

	data, err := db_read_ {{- .TableName -}} _ByPK (ctx, id)

	if err != nil {
		message := fmt.Sprintf("error while reading data: %v", err)
		log.Print(message)
		w.WriteHeader(http.StatusBadRequest)
		w.Write(getJsonResponse(false, message, nil))
		return
	}

	w.Write(getJsonResponse(true, "found data", data))
}
{{ end }}

{{ define "update" }}
func api_update_ {{- .TableName -}} (w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")

	values, err := url.ParseQuery(r.URL.RawQuery)

	if err != nil {
		message := fmt.Sprintf("error while parsing request query: %v", err)
		log.Print(message)
		w.WriteHeader(http.StatusBadRequest)
		w.Write(getJsonResponse(false, message, nil))
		return
	}

	id := values.Get("id")
	ctx := r.Context()

	var item Table_ {{- .TableName }}

	if err := json.NewDecoder(r.Body).Decode(&item); err != nil {
		message := fmt.Sprintf("error while reading request body: %v", err)
		log.Print(message)
		w.WriteHeader(http.StatusBadRequest)
		w.Write(getJsonResponse(false, message, nil))
		return
	}

	if err := db_update_ {{- .TableName -}} (ctx, id, &item); err != nil {
		message := fmt.Sprintf("error while updating : %v", err)
		log.Print(message)
		w.WriteHeader(http.StatusBadRequest)
		w.Write(getJsonResponse(false, message, nil))
		return
	}

	w.Write(getJsonResponse(true, "updated successfully", nil))
}
{{ end }}

{{ define "delete" }}
func api_delete_ {{- .TableName -}} (w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")

	values, err := url.ParseQuery(r.URL.RawQuery)

	if err != nil {
		message := fmt.Sprintf("error while parsing request query: %v", err)
		log.Print(message)
		w.WriteHeader(http.StatusBadRequest)
		w.Write(getJsonResponse(false, message, nil))
		return
	}

	id := values.Get("id")
	ctx := r.Context()

	if err := db_delete_ {{- .TableName -}} (ctx, id); err != nil {
		message := fmt.Sprintf("error while deleting: %v", err)
		log.Print(message)
		w.WriteHeader(http.StatusBadRequest)
		w.Write(getJsonResponse(false, message, nil))
		return
	}

	w.Write(getJsonResponse(true, "deleted successfully", nil))
}
{{ end }}
