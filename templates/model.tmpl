package main

import "github.com/golang-jwt/jwt/v5"

type Column struct {
	ColumnName    string
	DataType      string
	NotNull       bool
    Hash          bool
	minIndividual interface{}
	maxIndividual interface{}
	minArrLen     int // 0 indicates unset or non-array type
	maxArrLen     int // 0 indicates unset or non-array type
	Enums         []interface{}
	pgType        string
}

{{ range $table := . }}

{{ template "TableStruct" $table }}
{{ template "TableMap" $table }}

{{- if .IsAuthTable -}}
    {{ template "LoginStructs" $table }}
{{- else -}}
    {{ template "TableResponse" $table }}
{{- end -}}

{{- end -}}

{{- define "TableStruct" -}}
type Table_{{ .TableName }} struct {
    {{- if eq (len .PrimaryKey) 0 -}}
        ID__ CustomNullInt `json:"__ID"`;
    {{- end -}}

    {{- range $column := .Columns -}}
	    Column_{{ $column.ColumnName }} {{ getDbType $column.DataType }} `json:"{{ $column.ColumnName }}"`;
    {{- end -}}
}
{{- end -}}

{{ define "TableResponse" }}
type Table_ {{- .TableName -}} _response struct {
    {{- if eq (len .PrimaryKey) 0 -}}
    ID__ CustomNullInt `json:"__ID"`;
    {{- end -}}

    {{- range $column := .Columns -}}
        {{- if $column.Hash -}}
            {{- continue -}}
        {{- else if $column.ForeignTable -}}
            Fkey_{{ $column.ColumnName }} Table_{{ $column.ForeignTable }} `json:"{{ $column.ColumnName }}"`;
        {{- else -}}
            Column_{{ $column.ColumnName }} {{ getDbType $column.DataType }} `json:"{{ $column.ColumnName }}"`;
        {{- end -}}
    {{- end -}}
}
{{ end }}

{{ define "TableMap" }}
var Map_ {{- .TableName -}} = map[string]Column {
{{ range $column := .Columns }}
    "{{ $column.ColumnName }}" : {  
        ColumnName: " {{- $column.ColumnName -}} ",
        DataType: " {{- getDbType $column.DataType -}} ",
        NotNull: {{ $column.NotNull -}},
        pgType: " {{- $column.DataType -}} ",
        Hash: {{- $column.Hash -}},
    },
{{ end }}
}
{{ end }}

{{ define "LoginStructs" }}

{{- $roleExists := false -}}

{{- range $column := .Columns -}}
    {{- if eq $column.ColumnName "role" -}}
        {{- $roleExists = true -}}
    {{- end -}}
{{- end -}}


type CustomJwtClaims struct {
	Username string `json:"username"`;
    
    {{- if $roleExists -}}
        Role string `json:"role"`;
    {{- end -}}

    {{- range $orgField := getOrgFields -}}
        {{ capitalize $orgField }} string `json:"{{ $orgField }}"`;
    {{- end -}}

	jwt.RegisteredClaims
}

type Login_Input struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type Login_Output struct {
	Username string `json:"username"`;
	Password string `json:"password"`;
    
    {{- if $roleExists -}}
        Role string `json:"role"`;
    {{- end -}}

    {{- range $orgField := getOrgFields -}}
        {{ capitalize $orgField }} string `json:"{{ $orgField }}"`;
    {{- end -}}
}
{{ end }}